from __future__ import annotations
from typing import Optional, List, Dict, Any

class NodeNavigationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏ –∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –ª–æ–≥–∏–∫–æ–π"""
    
    def __init__(self, node: 'BaseFlatNode'):
        self._node = node
        
        # –°—ã—Ä—ã–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–≤—è–∑–∏ (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è MenuFlattener)
        self._prev_sibling: Optional['BaseFlatNode'] = None
        self._next_sibling: Optional['BaseFlatNode'] = None

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—ã—Ä—ã—Ö —Å–≤—è–∑–µ–π
    @property
    def prev_sibling(self) -> Optional['BaseFlatNode']:
        """–°—ã—Ä–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ sibling'–∞"""
        return self._prev_sibling

    @prev_sibling.setter
    def prev_sibling(self, value: Optional['BaseFlatNode']):
        self._prev_sibling = value

    @property
    def next_sibling(self) -> Optional['BaseFlatNode']:
        """–°—ã—Ä–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ sibling'–∞"""
        return self._next_sibling

    @next_sibling.setter
    def next_sibling(self, value: Optional['BaseFlatNode']):
        self._next_sibling = value

    # –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    @property
    def effective_prev_sibling(self) -> Optional['BaseFlatNode']:
        """–ü—Ä–µ–¥—ã–¥—É—â–∏–π sibling —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        if self._prev_sibling:
            return self._prev_sibling
        
        # –ï—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å —Å –¥–µ—Ç—å–º–∏
        if (self._node.parent and self._node.parent.navigate == 'cyclic' and 
            self._node.parent.children and len(self._node.parent.children) > 1):
            # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π
            if self._node == self._node.parent.children[0]:
                return self._node.parent.children[-1]
        
        return None

    @property
    def effective_next_sibling(self) -> Optional['BaseFlatNode']:
        """–°–ª–µ–¥—É—é—â–∏–π sibling —Å —É—á–µ—Ç–æ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è"""
        if self._next_sibling:
            return self._next_sibling
        
        # –ï—Å–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∏ –µ—Å—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å —Å –¥–µ—Ç—å–º–∏
        if (self._node.parent and self._node.parent.navigate == 'cyclic' and 
            self._node.parent.children and len(self._node.parent.children) > 1):
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤—ã–π
            if self._node == self._node.parent.children[-1]:
                return self._node.parent.children[0]
        
        return None

    @property
    def has_cyclic_siblings(self) -> bool:
        """–ò–º–µ–µ—Ç –ª–∏ —É–∑–µ–ª —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ —Å sibling'–∞–º–∏"""
        return (self._node.parent is not None and 
                self._node.parent.navigate == 'cyclic' and 
                len(self._node.parent.children) > 1)

    # –°–≤–æ–π—Å—Ç–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–µ—Ä–µ–≤–∞
    @property
    def sibling_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ sibling'–æ–≤ (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)"""
        if not self._node.parent:
            return 1
        return len(self._node.parent.children) if self._node.parent.children else 1
    
    @property
    def sibling_index(self) -> int:
        """–ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ sibling'–∞ (0-based)"""
        if not self._node.parent or not self._node.parent.children:
            return 0
        for i, sibling in enumerate(self._node.parent.children):
            if sibling.id == self._node.id:
                return i
        return 0

    @property
    def is_first_child(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –ø–µ—Ä–≤—ã–º —Ä–µ–±–µ–Ω–∫–æ–º —É —Ä–æ–¥–∏—Ç–µ–ª—è"""
        return self.sibling_index == 0

    @property
    def is_last_child(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–±–µ–Ω–∫–æ–º —É —Ä–æ–¥–∏—Ç–µ–ª—è"""
        return self.sibling_index == self.sibling_count - 1

    @property
    def is_only_child(self) -> bool:
        """–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–µ–±–µ–Ω–∫–æ–º"""
        return self.sibling_count == 1

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    def get_sibling_chain(self, count: int = 5) -> List['BaseFlatNode']:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É sibling'–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        chain = []
        current = self._node
        visited = set()
        
        for i in range(count):
            if current.id in visited:
                break
                
            visited.add(current.id)
            chain.append(current)
            
            if not current.navigation_manager.effective_next_sibling:
                break
                
            current = current.navigation_manager.effective_next_sibling
        
        return chain

    def get_navigation_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —É–∑–ª–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        parent_navigate = self._node.parent.navigate if self._node.parent else None
        
        return {
            "node_id": self._node.id,
            "parent_navigate": parent_navigate,
            "has_cyclic_siblings": self.has_cyclic_siblings,
            "sibling_count": self.sibling_count,
            "sibling_index": self.sibling_index,
            "is_first_child": self.is_first_child,
            "is_last_child": self.is_last_child,
            "is_only_child": self.is_only_child,
            "raw_prev_sibling": self._prev_sibling.id if self._prev_sibling else None,
            "raw_next_sibling": self._next_sibling.id if self._next_sibling else None,
            "effective_prev_sibling": self.effective_prev_sibling.id if self.effective_prev_sibling else None,
            "effective_next_sibling": self.effective_next_sibling.id if self.effective_next_sibling else None
        }

    def print_navigation_debug(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        info = self.get_navigation_info()
        print(f"Navigation debug for {self._node.id}:")
        print(f"  Parent navigate: {info['parent_navigate']}")
        print(f"  Siblings: {info['sibling_index'] + 1}/{info['sibling_count']}")
        print(f"  Position: {'first' if info['is_first_child'] else 'last' if info['is_last_child'] else 'middle'}")
        print(f"  Cyclic: {info['has_cyclic_siblings']}")
        print(f"  Raw prev: {info['raw_prev_sibling']}")
        print(f"  Raw next: {info['raw_next_sibling']}")
        print(f"  Effective prev: {info['effective_prev_sibling']}")
        print(f"  Effective next: {info['effective_next_sibling']}")

    def __repr__(self):
        """–°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        cyclic_flag = "üîÅ" if self.has_cyclic_siblings else "‚û°Ô∏è"
        return (f"NodeNavigationManager({self._node.id}, {cyclic_flag}, "
                f"siblings={self.sibling_index + 1}/{self.sibling_count})")