from typing import Dict, List, Optional, Any
import json

from flat_node import FlatNode
from menu_validator import MenuValidator
from menu_config import MenuConfig, ConfigError
from menu_data import MenuData
from base_flat_node import BaseFlatNode

class FlattenerError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    def __init__(self, message: str):
        super().__init__(message)

class MenuFlattener:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Ä–µ–≤–æ –º–µ–Ω—é –≤ –ø–ª–æ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–º–∏ —Å–≤—è–∑—è–º–∏"""
    
    def __init__(self, config: MenuConfig):
        self.flat_nodes: List[FlatNode] = []
        self.node_dict: Dict[str, FlatNode] = {}
        self._config = config
        self._menu_data = MenuData(self._config)
        
    def flatten(self, menu_tree: List[Dict[str, Any]] | None = None) -> List[BaseFlatNode]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ—Ä–µ–≤–æ –≤ –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏"""
        self.flat_nodes.clear()
        self.node_dict.clear()

        menu = menu_tree
        if menu is None:
            menu = self._config.menu_tree

        if menu is None:
            raise FlattenerError("–î–µ—Ä–µ–≤–æ –º–µ–Ω—é –ø—É—Å—Ç–æ–µ!")

        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –Ω–æ–¥—É –∫–∞–∫ BaseFlatNode
        self.root_node = BaseFlatNode({
                "id": "root",
                "title": "root", 
                "items": menu,
            },
            self._config,
            self._menu_data
        )
        self.root_node.navigate = self._config.root_navigate

        self.flat_nodes.append(self.root_node)
        self.node_dict['root'] = self.root_node
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        self._process_node(self.root_node, None, menu)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–µ—Ç–≤–µ–π
        self._apply_branch_navigation_rules()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
        self._make_cyclic_links()
        
        return self.flat_nodes
    
    def _apply_parent_navigation_rules(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –≤–µ—Ç–≤–µ–π"""
        for node in self.flat_nodes:
            # –ï—Å–ª–∏ —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ç–≤—å—é (–∏–º–µ–µ—Ç –¥–µ—Ç–µ–π) –∏ —É –Ω–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ navigate
            if node.is_branch and node.navigate is None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º default_branch_navigate –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
                node.navigate = self._config.default_branch_navigate
                print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ navigate='{node.navigate}' –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≤–µ—Ç–≤–∏ {node.id} (default_branch_navigate)")

    def _make_cyclic_links(self):
        """–ó–∞–º—ã–∫–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –¥–ª—è sibling'–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        processed_parents = set()
        
        for node in self.flat_nodes:
            parent = node.parent
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if not parent or parent.id in processed_parents:
                continue
                
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—è navigate = cyclic –∏ –µ—Å—Ç—å –¥–µ—Ç–∏
            if parent.navigate == "cyclic" and parent.children:
                processed_parents.add(parent.id)
                self._create_cyclic_siblings(parent)
                
    def _create_cyclic_siblings(self, parent: FlatNode):
        """–°–æ–∑–¥–∞–µ—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –¥–ª—è –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞ —Å navigate=cyclic"""
        if len(parent.children) < 2:
            return  # –ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–∏
            
        first_child = parent.children[0]
        last_child = parent.children[-1]
        
        # –ó–∞–º—ã–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
        first_child._prev_sibling = last_child
        last_child._next_sibling = first_child
        
        print(f"üîÅ –°–æ–∑–¥–∞–Ω—ã —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –¥–ª—è –¥–µ—Ç–µ–π —Ä–æ–¥–∏—Ç–µ–ª—è {parent.id} (first<->last)")

    def _process_node(self, parent: Optional[FlatNode], prev_sibling: Optional[FlatNode], 
                     nodes: List[Dict[str, Any]]) -> Optional[FlatNode]:
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–∑–ª—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤—è–∑–∏"""
        last_node = None
        
        for i, node_data in enumerate(nodes):
            # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π —É–∑–µ–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π FlatNode)
            flat_node = FlatNode(node_data, self._config, self._menu_data)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if flat_node.navigate is None:
                flat_node.navigate = self._config.default_navigate

            self.flat_nodes.append(flat_node)
            self.node_dict[flat_node.id] = flat_node
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ navigation_manager
            flat_node.parent = parent
            flat_node.prev_sibling = prev_sibling  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫ navigation_manager
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_sibling –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ sibling'–∞
            if prev_sibling:
                prev_sibling.next_sibling = flat_node  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫ navigation_manager
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –¥–µ—Ç—è–º
            if parent:
                parent.children.append(flat_node)
                if not parent.first_child:
                    parent.first_child = flat_node
                parent.last_child = flat_node
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π, –µ—Å–ª–∏ –µ—Å—Ç—å
            if 'items' in node_data and node_data['items']:
                self._process_children(flat_node, node_data['items'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
            prev_sibling = flat_node
            last_node = flat_node
        
        return last_node

    def _apply_branch_navigation_rules(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –≤–µ—Ç–≤–µ–π (—É–∑–ª–æ–≤ —Å –¥–µ—Ç—å–º–∏)"""
        for node in self.flat_nodes:
            # –ï—Å–ª–∏ —É–∑–µ–ª —è–≤–ª—è–µ—Ç—Å—è –≤–µ—Ç–≤—å—é (–∏–º–µ–µ—Ç –¥–µ—Ç–µ–π) –∏ —É –Ω–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
            if node.is_branch and node.navigate is None:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º default_branch_navigate –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –∏–ª–∏ 'limit' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                node.navigate = self._config.default_branch_navigate or 'limit'
                print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ navigate='{node.navigate}' –¥–ª—è –≤–µ—Ç–≤–∏ {node.id}")    

    def _process_children(self, parent: FlatNode, children_data: List[Dict[str, Any]]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã"""
        prev_sibling = None
        
        for child_data in children_data:
            flat_child = FlatNode(child_data, self._config, self._menu_data)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if flat_child.navigate is None:
                flat_child.navigate = self._config.default_navigate

            self.flat_nodes.append(flat_child)
            self.node_dict[flat_child.id] = flat_child
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ navigation_manager
            flat_child.parent = parent
            flat_child.prev_sibling = prev_sibling  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ
            
            if prev_sibling:
                prev_sibling.next_sibling = flat_child  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π—Å—Ç–≤–æ
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–º –¥–µ—Ç—è–º
            parent.children.append(flat_child)
            if not parent.first_child:
                parent.first_child = flat_child
            parent.last_child = flat_child
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π –¥–µ—Ç–µ–π
            if 'items' in child_data and child_data["items"]:
                self._process_children(flat_child, child_data["items"])
            
            prev_sibling = flat_child
    
    def get_node_by_id(self, node_id: str) -> Optional[FlatNode]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª –ø–æ ID"""
        return self.node_dict.get(node_id)
    
    def print_sibling_chain(self, node_id: str, count: int = 5):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É sibling'–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–ª—å—Ü–æ–≤—ã–≤–∞–Ω–∏—è"""
        node = self.get_node_by_id(node_id)
        if not node:
            print(f"–£–∑–µ–ª {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        parent_navigate = node.parent.navigate if node.parent else 'N/A'
        print(f"–¶–µ–ø–æ—á–∫–∞ sibling'–æ–≤ –¥–ª—è {node_id} (parent navigate: {parent_navigate}):")
        
        current = node
        visited = set()
        
        for i in range(count):
            if current.id in visited:
                print(f"  ... —Ü–∏–∫–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω ...")
                break
                
            visited.add(current.id)
            prev_id = current.prev_sibling.id if current.prev_sibling else 'None'
            next_id = current.next_sibling.id if current.next_sibling else 'None'
            print(f"  {i}: {current.id} (prev: {prev_id}, next: {next_id})")
            
            if not current.next_sibling or current.next_sibling == node:
                break
                
            current = current.next_sibling

    def print_navigation_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        print("\nüß≠ –°–≤–æ–¥–∫–∞ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:")
        print(f"  –ö–æ—Ä–Ω–µ–≤–∞—è –Ω–æ–¥–∞ (root): {self.root_node.navigate}")
        
        branches = [node for node in self.flat_nodes if node.is_branch and node.id != 'root']
        if branches:
            print(f"  –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –≤–µ—Ç–≤–∏ ({len(branches)}):")
            for branch in branches:
                children_count = len(branch.children) if branch.children else 0
                print(f"    - {branch.id}: {branch.navigate} ({children_count} –¥–µ—Ç–µ–π)")
        
        cyclic_parents = [node for node in self.flat_nodes if node.navigate == "cyclic" and node.children]
        if cyclic_parents:
            print(f"  –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ ({len(cyclic_parents)}):")
            for parent in cyclic_parents:
                print(f"    - {parent.id}: {len(parent.children)} –¥–µ—Ç–µ–π")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def main(config_file: str):
    try:
        config = MenuConfig(config_file)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_file} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        validator = MenuValidator(config=config)
        errors = validator.validate()
        if errors:
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:")
            for id, items in errors.items():
                print(f"‚ùå {id}:")
                for item in items:
                    print(f"\t‚û§ {item}")
            return 2
        else:
            print("‚úÖ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            flattener = MenuFlattener(config)
            flat_menu = flattener.flatten()
            for node in flat_menu:
                print(f"- {node}")    

    except ConfigError as e:
        print(f"‚ùå {e}")
        return 1
    # except Exception as e:
    #     print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    #     return 1
    
if __name__ == "__main__":
    main('./config/config.json')