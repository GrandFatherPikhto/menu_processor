from jinja2 import Environment, FileSystemLoader, Template
import os
from typing import Dict, List, Any
from enum import Enum

from menu_config import MenuConfig
from menu_processor import MenuProcessor

class MenuState(Enum):
    NAVIGATION = 0
    EDIT = 1

class MenuType(Enum):
    ROOT = "root"
    SUBMENU = "action_menu" 
    ACTION_BOOL = "action_bool"
    ACTION_INT = "action_int"
    ACTION_INT_FACTOR = "action_int_factor"
    ACTION_CALLBACK = "action_callback"
    ACTION_FLOAT = "action_float"
    ACTION_FLOAT_FACTOR = "action_float_factor"

class MenuGenerator:
    def __init__(self, processor):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –º–µ–Ω—é
        
        Args:
            processor: –≠–∫–∑–µ–º–ø–ª—è—Ä MenuProcessor —Å —É–ø–ª–æ—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        """
        self.processor : 'MenuProcessor' = processor
        self.flattened_menu = processor.get_flattened_menu()
        self.config : 'MenuConfig' = processor.get_config()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Jinja2 environment
        self.env = Environment(
            loader=FileSystemLoader('.'),  # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            trim_blocks=True,
            lstrip_blocks=True
        )
        
    def generate(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        print("üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é...")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤
        template_data = self._prepare_template_data()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .h —Ñ–∞–π–ª–∞
        template_path = self.config.get_template_path('menu_header')
        output_path = self.config.get_output_path('menu_header')

        self._generate_file(template_path, output_path, template_data)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è .c —Ñ–∞–π–ª–∞  
        template_path = self.config.get_template_path('menu_source')
        output_path = self.config.get_output_path('menu_source')
        self._generate_file(template_path, output_path, template_data)
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    def _prepare_template_data(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ Jinja2"""
        # –§–∏–ª—å—Ç—Ä—É–µ–º root –∏–∑ –º–µ–Ω—é
        menu_items = {k: v for k, v in self.flattened_menu.items() if k != 'root'}
        
        return {
            'includes' : self.processor.get_includes(),
            'menu_items': menu_items,
            'menu_states': {
                'NAVIGATION': 0,
                'EDIT': 1
            },
            'menu_types': {
                'ROOT': 'root',
                'ACTION_MENU': 'action_menu',
                'ACTION_BOOL': 'action_bool',
                'ACTION_INT': 'action_int',
                'ACTION_INT_FACTOR': 'action_int_factor',
                'ACTION_FLOAT': 'action_float',
                'ACTION_FLOAT_FACTOR': 'action_float_factor',
                'ACTION_CALLBACK': 'action_callback',
            },
            'first_menu_id': self._get_first_menu_id(),
            'config': {
                'templates': self.config.get_templates(),
                'output_files': self.config.get_output_files()
            },
            'event_cb': self.config.get_callback('event_cb'),
            'display_cb' : self.config.get_callback('display_cb')
        }
    
    def _get_first_menu_id(self):
        """–ü–æ–ª—É—á–∏—Ç—å ID –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–µ–Ω—é (–ø–æ—Å–ª–µ root)"""
        root = self.flattened_menu.get('root', {})
        first_child_id = root.get('first_child')
        if first_child_id and first_child_id in self.flattened_menu:
            return first_child_id.upper()
        return 'SETTINGS'  # fallback
    
    def _generate_file(self, template_path: str, output_path: str, template_data: Dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞
            template = self.env.get_template(template_path)
            
            # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
            content = template.render(**template_data)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω {output_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {output_path} —Ñ–∞–π–ª–∞: {e}")
