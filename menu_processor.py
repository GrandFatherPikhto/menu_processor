from typing import Dict, List, Set, Optional, Any
import json

from flat_node import FlatNode
from menu_validator import MenuValidator
from menu_config import MenuConfig, ConfigError
from menu_flattener import MenuFlattener, FlattenerError
from menu_data import ControlType
from common import save_json_data

class ProcessorError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    def __init__(self, message: str):
        super().__init__(message)

class MenuProcessor:
    def __init__(self, config_name: str):
        self._config_name = config_name
        self._config = MenuConfig(self._config_name)
        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {self._config_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        self._validator = MenuValidator(config=self._config)
        errors = self._validator.validate()
        if errors:
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:")
            for id, items in errors.items():
                print(f"‚ùå {id}:")
                for item in items:
                    print(f"\t‚û§ {item}")
            raise ProcessorError(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        else:
            print("‚úÖ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            self._flattener = MenuFlattener(self._config)
            self._flat_nodes = self._flattener.flatten()
            
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö
            self._print_control_summary()
    
    def _print_control_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª–∞–º:")
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
            print(f"- {node}")
            if hasattr(node, 'print_control_info'):
                node.print_control_info()
        print()

    def save_flattern_json(self, file_name: str | None = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–æ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤ JSON (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        if file_name is None and self._config.output_flattern:
            file_name = self._config.output_flattern
        
        if file_name:
            flat_data = {
                "nodes": [
                    {
                        "id": node.id,
                        "name": node.name,
                        "type": node.type,
                        "role": node.role,
                        "parent": node.parent.id if node.parent else None,
                        "prev_sibling": node.prev_sibling.id if node.prev_sibling else None,
                        "next_sibling": node.next_sibling.id if node.next_sibling else None,
                        "children": [child.id for child in node.children],
                        "is_leaf": node.is_leaf,
                        "is_branch": node.is_branch,
                        "controls": [
                            {
                                "type": control["type"].value,
                                "purpose": control["purpose"],
                                "navigate": control["navigate"].value,
                                "required": control["required"]
                            }
                            for control in getattr(node, '_controls', [])
                        ]
                    }
                    for node in self._flat_nodes if node.id != 'root'
                ]
            }
            
            try:
                with open(file_name, 'w', encoding='utf-8') as f:
                    json.dump(flat_data, f, indent=2, ensure_ascii=False)
                print(f"‚úÖ –ü–ª–æ—Å–∫–æ–µ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {file_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–æ—Å–∫–æ–≥–æ –º–µ–Ω—é: {e}")

    @property
    def config(self) -> MenuConfig:
        return self._config

    @property
    def menu(self) -> Dict[str, FlatNode]:
        """–í—Å–µ —É–∑–ª—ã –º–µ–Ω—é (–∏—Å–∫–ª—é—á–∞—è root)"""
        return {n.id: n for n in self._flat_nodes if n.id != 'root'}

    @property
    def functions(self) -> Dict[str, Dict[str, Any]]:
        """–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        items = {}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∑–ª–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            for function_info in node.all_function_infos:
                items[function_info["name"]] = function_info
            
            # –î–ª—è callback —Ä–æ–ª–∏ - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö callback'–∞—Ö
            if node.role == "callback":
                callback_info = {
                    "name": f"{node.id}_callback",
                    "category": node.category,
                    "type": node.type,
                    "role": node.role,
                    "purpose": "external_callback",
                    "node_id": node.id,
                    "event_type": "callback",
                    "navigate": None,
                    "source": "external"
                }
                items[callback_info["name"]] = callback_info
        
        return items

    @property
    def categories(self) -> Dict[str, Dict[str, Any]]:
        """–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é (—Ç–∏–ø + —Ä–æ–ª—å)"""
        items = {}
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            category = node.category
            if category is not None:
                items[category["name"]] = category
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–æ–ª–∞—Ö –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                items[category["name"]]["available_controls"] = [
                    {
                        "type": control["type"].value,
                        "purpose": control["purpose"],
                        "navigate": control["navigate"].value
                    }
                    for control in getattr(node, '_controls', [])
                ]
        
        return items

    @property
    def leafs(self) -> Dict[str, FlatNode]:
        """–í—Å–µ –ª–∏—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã (–∫–æ–Ω–µ—á–Ω—ã–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é)"""
        return {n.id: n for n in self._flat_nodes if n.is_leaf and n.id != 'root'}

    @property
    def branches(self) -> Dict[str, FlatNode]:
        """–í—Å–µ –≤–µ—Ç–≤–∏ –º–µ–Ω—é (—É–∑–ª—ã —Å –¥–µ—Ç—å–º–∏)"""
        return {n.id: n for n in self._flat_nodes if n.is_branch and n.id != 'root'}

    @property
    def first(self) -> Optional[FlatNode]:
        """–ü–µ—Ä–≤—ã–π —É–∑–µ–ª –º–µ–Ω—é (–ø–æ—Å–ª–µ root)"""
        root_node = next((node for node in self._flat_nodes if node.id == 'root'), None)
        if root_node and root_node.first_child:
            return root_node.first_child
        return None

    @property 
    def callback_nodes(self) -> Dict[str, FlatNode]:
        """–í—Å–µ —É–∑–ª—ã —Å —Ä–æ–ª—å—é callback"""
        return {n.id: n for n in self._flat_nodes if n.role == 'callback' and n.id != 'root'}

    @property
    def required_functions(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö"""
        required = {}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            for control in getattr(node, '_controls', []):
                if control.get("required", False):
                    category = node.category_name
                    if category not in required:
                        required[category] = []
                    
                    function_info = {
                        "node_id": node.id,
                        "control": control["type"].value,
                        "purpose": control["purpose"],
                        "function_name": getattr(node, f"function_{control['type'].value}_name", None)
                    }
                    required[category].append(function_info)
        
        return required

    @property
    def custom_callbacks(self) -> Dict[str, Dict[str, Any]]:
        """–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ callback-—Ñ—É–Ω–∫—Ü–∏–∏"""
        callbacks = {}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            node_callbacks = node.custom_callbacks_summary
            for cb_type, cb_name in node_callbacks.items():
                if cb_name and cb_type != "auto_draw_value_cb":  # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
                    callbacks[cb_name] = {
                        "node_id": node.id,
                        "callback_type": cb_type,
                        "function_name": cb_name,
                        "node": node
                    }
        
        return callbacks

    @property
    def auto_generated_functions(self) -> Dict[str, Dict[str, Any]]:
        """–í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        auto_funcs = {}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            for func_info in node.all_function_infos:
                auto_funcs[func_info["name"]] = {
                    **func_info,
                    "node_id": node.id,
                    "source": "auto_generated"
                }
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
            if node.callback_manager.auto_draw_value_cb_name and not node.callback_manager.draw_value_cb:
                auto_funcs[node.callback_manager.auto_draw_value_cb_name] = {
                    "name": node.callback_manager.auto_draw_value_cb_name,
                    "category": node.category,
                    "node_id": node.id,
                    "source": "auto_draw",
                    "purpose": "draw_value",
                    "event_type": "draw_value",
                    "navigate": None
                }
        
        return auto_funcs

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    @property
    def functions_by_event_type(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è"""
        grouped = {}
        
        for func_name, func_info in self.functions.items():
            event_type = func_info.get("event_type", "unknown")
            if event_type not in grouped:
                grouped[event_type] = []
            grouped[event_type].append(func_info)
        
        return grouped

    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    @property
    def functions_by_navigation(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        grouped = {}
        
        for func_name, func_info in self.functions.items():
            navigate = func_info.get("navigate", "unknown")
            if navigate not in grouped:
                grouped[navigate] = []
            grouped[navigate].append(func_info)
        
        return grouped
    
    @property
    def nodes_with_custom_callbacks(self) -> Dict[str, FlatNode]:
        """–í—Å–µ —É–∑–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ callback'–∞–º–∏"""
        return {n.id: n for n in self._flat_nodes if n.has_custom_callbacks and n.id != 'root'}

    def get_callbacks_by_type(self, callback_type: str) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å callback'–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        result = {}
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            callback_value = getattr(node, callback_type, None)
            if callback_value:
                result[node.id] = callback_value
        return result
    
    def print_callback_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ callback'–∞–º"""
        print("\nüéõÔ∏è –°–≤–æ–¥–∫–∞ –ø–æ callback-—Ñ—É–Ω–∫—Ü–∏—è–º:")
        
        custom_callbacks = self.custom_callbacks
        if custom_callbacks:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ callback'–∏:")
            for cb_name, cb_info in custom_callbacks.items():
                print(f"  - {cb_name} ({cb_info['callback_type']}) -> {cb_info['node_id']}")
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ callback'–∏: –Ω–µ—Ç")
        
        auto_funcs = self.auto_generated_functions
        if auto_funcs:
            print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for func_name, func_info in auto_funcs.items():
                print(f"  - {func_name} ({func_info['source']}) -> {func_info['node_id']}")
        
        nodes_with_callbacks = self.nodes_with_custom_callbacks
        if nodes_with_callbacks:
            print(f"–£–∑–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ callback'–∞–º–∏: {len(nodes_with_callbacks)}")
        else:
            print("–£–∑–ª—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ callback'–∞–º–∏: –Ω–µ—Ç")

    def get_functions_by_category(self, category_name: str) -> List[Dict[str, Any]]:
        """–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        return [
            func_info for func_info in self.functions.values()
            if func_info.get("category", {}).get("name") == category_name
        ]

    def validate_required_functions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã"""
        missing_functions = []
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            for control in getattr(node, '_controls', []):
                if control.get("required", False):
                    function_name = None
                    if control["type"] == ControlType.CLICK:
                        function_name = node.callback_manager._auto_click_function
                    elif control["type"] == ControlType.POSITION:
                        function_name = node.callback_manager._auto_position_function
                    
                    if not function_name:
                        missing_functions.append({
                            "node": node.id,
                            "control": control["type"].value,
                            "purpose": control["purpose"]
                        })
        
        if missing_functions:
            print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
            for missing in missing_functions:
                print(f"   - {missing['node']}: {missing['control']} ({missing['purpose']})")
            return False
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return True

    @property
    def detailed_callback_infos(self) -> Dict[str, List[Dict[str, Any]]]:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö callback-—Ñ—É–Ω–∫—Ü–∏—è—Ö, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ —Ç–∏–ø–∞–º"""
        callback_types = [
            'click_cb', 'position_cb', 'double_click_cb', 
            'long_click_cb', 'event_cb', 'draw_value_cb'
        ]
        
        result = {cb_type: [] for cb_type in callback_types}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            for cb_type in callback_types:
                info = node.get_callback_info(cb_type)
                if info:
                    result[cb_type].append(info)
        
        return result

    @property
    def callback_summary_by_category(self) -> Dict[str, Dict[str, List[Dict[str, Any]]]]:
        """–°–≤–æ–¥–∫–∞ callback-—Ñ—É–Ω–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        categories = {}
        
        for node in self._flat_nodes:
            if node.id == 'root':
                continue
                
            category = node.category_name
            if category not in categories:
                categories[category] = {}
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º callback'–∏ –ø–æ —Ç–∏–ø—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            for cb_type, info in node.defined_callback_infos.items():
                if cb_type not in categories[category]:
                    categories[category][cb_type] = []
                categories[category][cb_type].append(info)
        
        return categories

    def get_callbacks_by_category(self, category_name: str) -> Dict[str, List[Dict[str, Any]]]:
        """–í—Å–µ callback-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        result = {}
        
        for node in self._flat_nodes:
            if node.id == 'root' or node.category_name != category_name:
                continue
                
            for cb_type, info in node.defined_callback_infos.items():
                if cb_type not in result:
                    result[cb_type] = []
                result[cb_type].append(info)
        
        return result


    def print_detailed_callback_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º callback-—Ñ—É–Ω–∫—Ü–∏—è–º"""
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ callback-—Ñ—É–Ω–∫—Ü–∏—è–º:")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º callback'–æ–≤
        detailed_infos = self.detailed_callback_infos
        for cb_type, infos in detailed_infos.items():
            if infos:
                custom_count = sum(1 for info in infos if info["custom"])
                auto_count = len(infos) - custom_count
                print(f"\n{cb_type.upper()}:")
                print(f"  –í—Å–µ–≥–æ: {len(infos)} (üéõÔ∏è {custom_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö, ‚öôÔ∏è {auto_count} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö)")
                
                for info in infos[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                    custom_flag = "üéõÔ∏è" if info["custom"] else "‚öôÔ∏è"
                    print(f"    - {info['name']} {custom_flag} -> {info['node_id']} ({info['category']})")
                
                if len(infos) > 3:
                    print(f"    ... –∏ –µ—â—ë {len(infos) - 3}")

        # –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        category_summary = self.callback_summary_by_category
        for category, callbacks in category_summary.items():
            total = sum(len(cb_list) for cb_list in callbacks.values())
            if total > 0:
                print(f"\n  {category}:")
                for cb_type, cb_list in callbacks.items():
                    custom_count = sum(1 for cb in cb_list if cb["custom"])
                    auto_count = len(cb_list) - custom_count
                    print(f"    {cb_type}: {len(cb_list)} (üéõÔ∏è {custom_count}, ‚öôÔ∏è {auto_count})")

    def print_detailed_function_summary(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å type –∏ role"""
        print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:")
        
        # –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        by_event = self.functions_by_event_type
        for event_type, functions in by_event.items():
            print(f"\nüéØ {event_type.upper()} —Ñ—É–Ω–∫—Ü–∏–∏ ({len(functions)}):")
            for func in functions[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                source_flag = "üéõÔ∏è" if func.get("custom") else "‚öôÔ∏è"
                navigate_info = f" [navigate: {func.get('navigate', 'N/A')}]" if func.get("navigate") else ""
                type_role_info = f" ({func.get('type', 'N/A')}_{func.get('role', 'N/A')})"
                print(f"    - {func['name']} {source_flag}{navigate_info}{type_role_info} -> {func['node_id']}")
            
            if len(functions) > 3:
                print(f"    ... –∏ –µ—â—ë {len(functions) - 3}")

        # –°–≤–æ–¥–∫–∞ –ø–æ type –∏ role
        print(f"\nüè∑Ô∏è –°–≤–æ–¥–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∏ —Ä–æ–ª—è–º:")
        by_type_role = self.functions_by_type_role
        for type_role, functions in by_type_role.items():
            if type_role and type_role != "N/A_N/A":
                print(f"  {type_role}: {len(functions)} —Ñ—É–Ω–∫—Ü–∏–π")

    @property
    def functions_by_type_role(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ type_role"""
        grouped = {}
        
        for func_name, func_info in self.functions.items():
            type_val = func_info.get("type", "N/A")
            role_val = func_info.get("role", "N/A")
            type_role = f"{type_val}_{role_val}"
            
            if type_role not in grouped:
                grouped[type_role] = []
            grouped[type_role].append(func_info)
        
        return grouped

    @property
    def functions_by_type(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É –¥–∞–Ω–Ω—ã—Ö"""
        grouped = {}
        
        for func_name, func_info in self.functions.items():
            type_val = func_info.get("type", "unknown")
            if type_val not in grouped:
                grouped[type_val] = []
            grouped[type_val].append(func_info)
        
        return grouped

    @property
    def functions_by_role(self) -> Dict[str, List[Dict[str, Any]]]:
        """–§—É–Ω–∫—Ü–∏–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ —Ä–æ–ª–∏"""
        grouped = {}
        
        for func_name, func_info in self.functions.items():
            role_val = func_info.get("role", "unknown")
            if role_val not in grouped:
                grouped[role_val] = []
            grouped[role_val].append(func_info)
        
        return grouped
    
    def print_debug_factor_nodes(self):
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ factor —É–∑–ª–∞—Ö –∏ –∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö"""
        print("\nüîç –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û FACTOR –£–ó–õ–ê–•:")
        
        factor_nodes = [n for n in self._flat_nodes if n.role == "factor" and n.id != 'root']
        print(f"Factor —É–∑–ª—ã: {[n.id for n in factor_nodes]}")
        
        for node in factor_nodes:
            print(f"\n--- {node.id} ---")
            print(f"Controls: {node.controls}")
            print(f"Navigate: {node.navigate}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CallbackManager
            print(f"Auto click function: {node.callback_manager._auto_click_function}")
            print(f"Auto position function: {node.callback_manager._auto_position_function}")
            print(f"Auto click info: {node.callback_manager._auto_click_info}")
            print(f"Auto position info: {node.callback_manager._auto_position_info}")
            
            print(f"Auto functions info: {node.callback_manager.auto_functions_info}")
            print(f"All function infos: {node.all_function_infos}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            for control in getattr(node, '_controls', []):
                if control.get("required", False):
                    function_name = None
                    if control["type"] == ControlType.CLICK:
                        function_name = node.callback_manager._auto_click_function
                    elif control["type"] == ControlType.POSITION:
                        function_name = node.callback_manager._auto_position_function
                    print(f"Required {control['type'].value}: {function_name} (purpose: {control['purpose']})")

# –û–±–Ω–æ–≤–ª—è–µ–º main –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–≤–æ–¥–∫–∏
def main(config_name: str) -> int:
    try:
        processor = MenuProcessor(config_name)
        
        # –î–û–ë–ê–í–ò–¢–¨ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ factor —É–∑–ª–æ–≤:
        processor.print_debug_factor_nodes()
        
        print("\nüìã –°–≤–æ–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:")
        print(f"‚Ä¢ –£–∑–ª–æ–≤ –º–µ–Ω—é: {len(processor.menu)}")
        print(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(processor.categories)}")
        print(f"‚Ä¢ –§—É–Ω–∫—Ü–∏–π: {len(processor.functions)}")
        print(f"‚Ä¢ –õ–∏—Å—Ç—å–µ–≤: {len(processor.leafs)}")
        print(f"‚Ä¢ –í–µ—Ç–≤–µ–π: {len(processor.branches)}")
        print(f"‚Ä¢ Callback —É–∑–ª–æ–≤: {len(processor.callback_nodes)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        processor.validate_required_functions()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–≤–æ–¥–∫—É —Å type –∏ role
        processor.print_detailed_function_summary()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–æ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        processor.save_flattern_json("./output/flatterned.json")

        save_json_data(processor.functions, "./output/functions.json")
        
        return 0
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    main("./config/config.json")