import json
from collections import deque
from typing import Dict, List, Optional, Any


from menu_config import MenuConfig
from menu_error import MenuError
from menu_validator import MenuValidator
from menu_flattener import MenuFlattener

class MenuProcessor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ–≥–æ –º–µ–Ω—é"""
    
    def __init__(self):
        self.config = MenuConfig()
        self.validator = MenuValidator()
        self.flattener = MenuFlattener()
        self.menu_structure: Dict[str, Dict] = {}
    
    def load_menu_file(self, input_file: str) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ –º–µ–Ω—é"""
        try:
            with open(input_file, 'r', encoding='utf-8') as f:
                menu_data = json.load(f)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if 'config' in menu_data:
                self.config.load_from_dict(menu_data['config'])
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config_errors = self.config.validate()
            if config_errors:
                print("‚ùå –û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for error in config_errors:
                    print(f"   - {error}")
                return False
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é
            if not self.validator.validate(menu_data):
                self._print_validation_errors()
                return False
            
            # –£–ø–ª–æ—â–∞–µ–º –º–µ–Ω—é
            menu_items = menu_data.get('menu', [])
            self.menu_structure = self.flattener.flatten(menu_items)
            
            return True
            
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON: {e}")
            return False
        except MenuError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–Ω—é: {e}")
            return False
    
    def generate_output(self, output_file: str = None) -> bool:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if not self.menu_structure:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            return False
        
        try:
            output_path = output_file or 'menu_output.json'
            
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(self.menu_structure, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ –£–ø–ª–æ—â–µ–Ω–Ω–æ–µ –º–µ–Ω—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _print_validation_errors(self) -> None:
        """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        print("‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ–Ω—é:")
        for error in self.validator.get_errors():
            print(f"   - {error}")
    
    def print_summary(self) -> None:
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        if not self.menu_structure:
            print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return
        
        print("\nüìä –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
        print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é: {len(self.menu_structure)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é ID
        explicit_ids = sum(1 for item in self.menu_structure.values() 
                          if 'original_id' in item)
        generated_ids = len(self.menu_structure) - explicit_ids - 1  # -1 –¥–ª—è root
        
        print(f"   –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö ID: {explicit_ids}")
        print(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ID: {generated_ids}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º root
        root = self.menu_structure.get('root')
        if root and 'first_child' in root:
            print(f"   –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é: {root['first_child']}")

    def get_config(self) -> MenuConfig:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self.config
    
    def get_flattened_menu(self) -> Dict[str, Dict]:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —É–ø–ª–æ—â–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
        return self.menu_structure.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    def get_template_path(self, file_type: str) -> Optional[str]:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—É—Ç–∏ –∫ —à–∞–±–ª–æ–Ω—É"""
        return self.config.get_template_path(file_type)
    
    def get_output_path(self, file_type: str) -> Optional[str]:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø—É—Ç–∏ –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
        return self.config.get_output_path(file_type) 

    def get_includes(self) -> List[str]:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –≤–∫–ª—é—á–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if self.config.get_includes():
            return self.config.get_includes()
        else:
            return []

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    processor = MenuProcessor()
    
    input_file = "config/menu_config.json"
    
    if processor.load_menu_file(input_file):
        print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        processor.print_summary()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        root = processor.menu_structure.get('root')
        if root:
            print(f"\nüå≥ –ö–æ—Ä–Ω–µ–≤–∞—è –Ω–æ–¥–∞:")
            print(f"   ID: {root['id']}")
            print(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–±–µ–Ω–æ–∫: {root.get('first_child', 'None')}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        processor.generate_output("output/flattened_menu.json")

        print("\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")