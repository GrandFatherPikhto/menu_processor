import json
from collections import deque
import sys

class MenuValidationError(Exception):
    """–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–µ–Ω—é"""
    def __init__(self, message, node_path=None, line_info=None):
        self.message = message
        self.node_path = node_path or []
        self.line_info = line_info
        super().__init__(self._format_message())
    
    def _format_message(self):
        path_str = ' -> '.join(self.node_path) if self.node_path else 'root'
        line_info = f" (—Å—Ç—Ä–æ–∫–∞ {self.line_info})" if self.line_info else ""
        return f"–û—à–∏–±–∫–∞ –≤ —É–∑–ª–µ '{path_str}'{line_info}: {self.message}"

def node_is_root(node):
    if node.get('root', None):
        return False
    if node.get('root').lower().strip() == 'root':
        return True
    return False

class ReadConfig:
    def __init__(self, ):
        self.json_file = ''
        self.node_counter = 0
        self.errors = []

    def read_config(self):
        try:
            flattened_menu = flatten_menu_with_validation(self.json_file)
            
            if flattened_menu:
                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                
                # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
                print(f"   –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(flattened_menu)}")
                types_count = {}
                for item in flattened_menu.values():
                    types_count[item['type']] = types_count.get(item['type'], 0) + 1
                
                for type_name, count in types_count.items():
                    print(f"   {type_name}: {count}")

                return flattened_menu                
            else:
                print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
                return None
                
        except MenuValidationError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

        return None


def validate_menu_node(node, path, line_offset=0):
    
    node_counter += 1
    current_path = path + [node.get('name', f'node_{node_counter}')]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞
    node_line = None
    if hasattr(node, '__line__'):
        node_line = node.__line__ + line_offset
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if not node_is_root and 'id' not in node:
        errors.append(MenuValidationError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'id'",
            current_path,
            node_line
        ))

    if 'name' not in node:
        errors.append(MenuValidationError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'name'",
            current_path,
            node_line
        ))
    
    if 'type' not in node:
        errors.append(MenuValidationError(
            "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ 'type'",
            current_path,
            node_line
        ))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞
    valid_types = ['root', 'submenu', 'action_int', 'action_int_factor', 
                    'action_callback', 'action_bool']
    if 'type' in node and node['type'] not in valid_types:
        errors.append(MenuValidationError(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø '{node['type']}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã: {valid_types}",
            current_path,
            node_line
        ))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
    if node.get('type') == 'action_int':
        for field in ['min', 'max', 'default']:
            if field not in node:
                errors.append(MenuValidationError(
                    f"–î–ª—è —Ç–∏–ø–∞ 'action_int' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ '{field}'",
                    current_path,
                    node_line
                ))
    
    elif node.get('type') == 'action_int_factor':
        for field in ['min', 'max', 'default', 'factors', 'default_factor_idx']:
            if field not in node:
                errors.append(MenuValidationError(
                    f"–î–ª—è —Ç–∏–ø–∞ 'action_int_factor' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ '{field}'",
                    current_path,
                    node_line
                ))
    
    elif node.get('type') == 'action_callback' and 'callback' not in node:
        errors.append(MenuValidationError(
            "–î–ª—è —Ç–∏–ø–∞ 'action_callback' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ 'callback'",
            current_path,
            node_line
        ))
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    for child in node.get('children', []):
        validate_node(child, current_path, line_offset)


def validate_menu_structure(menu_data, input_file):
    """
    –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–µ–Ω—é, –ø—Ä–æ–≤–µ—Ä—è—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–∞—Ö –¥–ª—è –æ—à–∏–±–æ–∫
    """
    errors = []
    node_counter = 0
    
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    if 'menu' in menu_data and menu_data['menu']:
        validate_node(menu_data['menu'][0], [])
    else:
        errors.append(MenuValidationError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–Ω—é"))
    
    return errors

def get_json_line_info(input_file):
    """
    –ß–∏—Ç–∞–µ—Ç JSON —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–∞—Ö –∫ –∫–∞–∂–¥–æ–º—É —É–∑–ª—É
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫
        with open(input_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü–∞—Ä—Å–∏–º JSON —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏—è—Ö
        lines = content.split('\n')
        data = json.loads(content)
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–æ–∫–∞—Ö
        def add_line_info(obj, line_offset=0):
            if isinstance(obj, dict):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                if hasattr(obj, '__line__'):
                    obj.__line__ += line_offset
                
                for key, value in obj.items():
                    if isinstance(value, (dict, list)):
                        add_line_info(value, line_offset)
            
            elif isinstance(obj, list):
                for item in obj:
                    if isinstance(item, (dict, list)):
                        add_line_info(item, line_offset)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–æ–∫–∞—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.decoder.JSONDecoder
        add_line_info(data)
        return data, lines
        
    except Exception as e:
        raise MenuValidationError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

def flatten_menu_with_validation(input_file):
    """
    –ß–∏—Ç–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –º–µ–Ω—é, –∑–∞—Ç–µ–º —É–ø–ª–æ—â–∞–µ—Ç –µ–≥–æ
    """
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∫–∞—Ö
        menu_data, file_lines = get_json_line_info(input_file)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        validation_errors = validate_menu_structure(menu_data, input_file)
        
        if validation_errors:
            print("–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:")
            for error in validation_errors:
                print(f"  - {error}")
            return None
        
        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —É–ø–ª–æ—â–∞–µ–º –º–µ–Ω—é
        flattened_dict = {}
        node_queue = deque()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—á–µ—Ä–µ–¥—å
        root = menu_data['menu'][0]
        node_queue.append((root, None, None, []))  # (node, parent_id, prev_sibling_id, path)
        
        # –û–±—Ö–æ–¥ –¥–µ—Ä–µ–≤–∞ –≤ —à–∏—Ä–∏–Ω—É
        while node_queue:
            node, parent_id, prev_sibling_id, path = node_queue.popleft()
            
            # –°–æ–∑–¥–∞–µ–º ID —ç–ª–µ–º–µ–Ω—Ç–∞
            # item_id = node['name'].lower().replace(' ', '_')

            current_path = path + [node['name']]
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
            item = {
                'id': item_id,
                'title': node['name'],
                'type': node['type']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
            if parent_id:
                item['parent'] = parent_id
            if prev_sibling_id:
                item['prev_sibling'] = prev_sibling_id
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–æ–ª—è
            if node['type'] in ['action_int', 'action_int_factor']:
                for field in ['min', 'max', 'default']:
                    if field in node:
                        item[field] = node[field]
                
                if node['type'] == 'action_int_factor':
                    for field in ['factors', 'default_factor_idx']:
                        if field in node:
                            item[field] = node[field]
            
            elif node['type'] == 'action_callback' and 'callback' in node:
                item['callback'] = node['callback']
            
            elif node['type'] == 'action_bool' and 'default' in node:
                item['default'] = node['default']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç
            flattened_dict[item_id] = item
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
            children = node.get('children', [])
            if children:
                item['first_child'] = children[0]['name'].lower().replace(' ', '_')
                
                prev_id = None
                for child in children:
                    child_id = child['name'].lower().replace(' ', '_')
                    node_queue.append((child, item_id, prev_id, current_path))
                    prev_id = child_id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_sibling —Å–≤—è–∑–∏
        for item_id, item in flattened_dict.items():
            if 'prev_sibling' in item:
                prev_id = item['prev_sibling']
                if prev_id in flattened_dict:
                    flattened_dict[prev_id]['next_sibling'] = item_id
        
        return flattened_dict
        
    except FileNotFoundError:
        raise MenuValidationError(f"–§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except json.JSONDecodeError as e:
        raise MenuValidationError(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ JSON: {e}")
    except Exception as e:
        raise MenuValidationError(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def save_items(items: dict, filename):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(items, f, indent=2, ensure_ascii=False)
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    input_filename = "config/menu_config.json"
    output_filename = "output/menu_config_validated.json"
    items = read_config(input_filename)
    if items != None:
        save_items(items, output_filename)
