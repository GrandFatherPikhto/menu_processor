/**
 * @file {{ config.menu_name }}.c
 * @brief Auto-generated menu implementation
 * @author {{ config.author }}
 * @version {{ config.version }}
 * 
 * ⚠️ This file is auto-generated. Do not edit manually!
 */

#include "{{ config.menu_name }}.h"
#include "lcd1602.h"
#include <string.h>

// Menu variables
{% for var_name, var_config in config.variables.items() %}
{{ var_config.type }} {{ var_name }} = {{ var_config.default }};
{% endfor %}

// Navigation globals
menu_nav_item_t* current_menu = NULL;
const menu_nav_item_t menu_nav_table[] = {
    {% for item in nav_table %}
    {
        .enter_handler = {{ item.enter_handler }},
        .parent_handler = {{ item.parent_handler }},
        .first_child_handler = {{ item.first_child }},
        .next_sibling_handler = {{ item.next_sibling }},
        .prev_sibling_handler = {{ item.prev_sibling }},
        .title = "{{ item.title|c_safe }}",
        .type = MENU_TYPE_{{ item.type|upper }},
        .data_ptr = {{ item.data_ptr }},
        {% if item.type in ['action_int', 'action_float'] and item.config %}
        .config.numeric = {
            .min_value = {{ item.config.min }},
            .max_value = {{ item.config.max }},
            .step = {{ item.config.step }}
        }
        {% elif 'callback' in item %}
        .config.action_callback = {{ item.callback }}
        {% else %}
        .config.action_callback = NULL
        {% endif %}
    }{% if not loop.last %},{% endif %}
    {% endfor %}
};

const uint16_t menu_nav_table_size = {{ nav_table|length }};

// Handler implementations
{% for menu_id in menu_order %}
void menu_{{ menu_id }}_handler() {
    for (uint16_t i = 0; i < menu_nav_table_size; i++) {
        if (menu_nav_table[i].enter_handler == menu_{{ menu_id }}_handler) {
            current_menu = (menu_nav_item_t*)&menu_nav_table[i];
            break;
        }
    }
}
{% endfor %}

// Navigation functions
void menu_init() {
    menu_main_handler();
}

void menu_draw() {
    if (!current_menu) return;
    
    lcd1602_clear();
    lcd1602_set_cursor(0, 0);
    lcd1602_print(current_menu->title);
    
    if (current_menu->data_ptr) {
        lcd1602_set_cursor(0, 1);
        switch (current_menu->type) {
            case MENU_TYPE_ACTION_BOOL:
                lcd1602_print(*(bool*)current_menu->data_ptr ? "ON " : "OFF");
                break;
            case MENU_TYPE_ACTION_INT:
                lcd1602_printf("%d", *(int*)current_menu->data_ptr);
                break;
            case MENU_TYPE_ACTION_FLOAT:
                lcd1602_printf("%.1f", *(float*)current_menu->data_ptr);
                break;
            default:
                lcd1602_print(">");
        }
    }
}


void menu_next() {
    if (current_menu && current_menu->next_sibling_handler) {
        current_menu->next_sibling_handler();
        menu_draw();
    }
}

void menu_prev() {
    if (current_menu && current_menu->prev_sibling_handler) {
        current_menu->prev_sibling_handler();
        menu_draw();
    }
}

void menu_enter() {
    if (!current_menu) return;
    
    if (current_menu->first_child_handler) {
        current_menu->first_child_handler();
    } else if (current_menu->type == MENU_TYPE_ACTION && current_menu->config.action_callback) {
        current_menu->config.action_callback();
    }
    menu_draw();
}

void menu_back() {
    if (current_menu && current_menu->parent_handler) {
        current_menu->parent_handler();
        menu_draw();
    }
}

void menu_increment() {
    if (!current_menu || !current_menu->data_ptr) return;
    
    switch (current_menu->type) {
        case MENU_TYPE_ACTION_BOOL:
            *(bool*)current_menu->data_ptr = !*(bool*)current_menu->data_ptr;
            break;
        case MENU_TYPE_ACTION_INT:
            (*(int*)current_menu->data_ptr)++;
            if (current_menu->config.numeric.max_value > 0 && 
                *(int*)current_menu->data_ptr > current_menu->config.numeric.max_value) {
                *(int*)current_menu->data_ptr = current_menu->config.numeric.max_value;
            }
            break;
        case MENU_TYPE_ACTION_FLOAT:
            *(float*)current_menu->data_ptr += current_menu->config.numeric.step;
            if (current_menu->config.numeric.max_value > 0 && 
                *(float*)current_menu->data_ptr > current_menu->config.numeric.max_value) {
                *(float*)current_menu->data_ptr = current_menu->config.numeric.max_value;
            }
            break;
    }
    menu_draw();
}

void menu_decrement() {
    if (!current_menu || !current_menu->data_ptr) return;
    
    switch (current_menu->type) {
        case MENU_TYPE_ACTION_BOOL:
            *(bool*)current_menu->data_ptr = !*(bool*)current_menu->data_ptr;
            break;
        case MENU_TYPE_ACTION_INT:
            (*(int*)current_menu->data_ptr)--;
            if (current_menu->config.numeric.min_value > 0 && 
                *(int*)current_menu->data_ptr < current_menu->config.numeric.min_value) {
                *(int*)current_menu->data_ptr = current_menu->config.numeric.min_value;
            }
            break;
        case MENU_TYPE_ACTION_FLOAT:
            *(float*)current_menu->data_ptr -= current_menu->config.numeric.step;
            if (current_menu->config.numeric.min_value > 0 && 
                *(float*)current_menu->data_ptr < current_menu->config.numeric.min_value) {
                *(float*)current_menu->data_ptr = current_menu->config.numeric.min_value;
            }
            break;
    }
    menu_draw();
}