#ifndef MENU_H
#define MENU_H

#include <stdint.h>
#include <stdbool.h>

typedef enum {
{% for n in flat %}
    MENU_{{ n.enum }} = {{ n.id }},
{% endfor %}
    MENU_COUNT
} menu_id_t;

{% if actions|length > 0 %}
typedef enum {
{% for a in actions %}
    ACTION_{{ a.enum }} = {{ loop.index0 }},
{% endfor %}
    ACTION_NONE = -1
} action_id_t;
{% else %}
typedef enum { ACTION_NONE = -1 } action_id_t;
{% endif %}

{% if screens|length > 0 %}
typedef enum {
{% for s in screens %}
    SCREEN_{{ s.enum }} = {{ loop.index0 }},
{% endfor %}
    SCREEN_NONE = -1
} screen_id_t;
{% else %}
typedef enum { SCREEN_NONE = -1 } screen_id_t;
{% endif %}

/* menu entry */
typedef struct {
    const char *title;
    menu_id_t id;
    int parent; /* -1 for root */
    int child;  /* first child id or -1 */
    int next;   /* next sibling id or -1 */
    int prev;   /* prev sibling id or -1 */
    action_id_t action;
    screen_id_t screen;
} menu_entry_t;

/* editable data entry - union to save space */
typedef enum {
    MD_TYPE_BOOL,
    MD_TYPE_INT,
    MD_TYPE_FLOAT
} md_type_t;

typedef struct {
    menu_id_t id;
    md_type_t type;
    union {
        bool b;
        int32_t i;
        float f;
    } value;
    int32_t min;
    int32_t max;
    int32_t step; /* for int types, stored as int */
    int factor_idx; /* for action_int_factor: index in factors array */
} menu_data_entry_t;

typedef struct {
    menu_data_entry_t entries[{{ editable_count }}];
} menu_data_t;

/* factor tables (for action_int_factor) */
{% for f in factor_defs %}
static const int32_t FACTORS_{{ f.enum }}[{{ f.len }}] = { {% for v in f.values %}{{ v }}{% if not loop.last %}, {% endif %}{% endfor %} };
{% endfor %}

/* prototypes */
extern const menu_entry_t menu_table[MENU_COUNT];
menu_data_t *menu_get_data(void);
void *menu_get_data_ptr(menu_id_t id);

/* display/action API */
void menu_show(menu_id_t id);
void menu_action(menu_id_t id);

/* navigation API */
menu_id_t menu_next(menu_id_t current);
menu_id_t menu_prev(menu_id_t current);
menu_id_t menu_enter(menu_id_t current);
menu_id_t menu_back(menu_id_t current);

/* rotary events handlers (to be called from ISR / input loop) */
void handle_push_button(void);
void handle_long_push_button(void);
void handle_double_click_push_button(void);
void handle_change_position(int8_t delta);

#endif /* MENU_H */