#include "menu_config.h"
#include "menu_struct.h"

{% for item_id, item in leaf_items.items() if item.c_str_factors is not none %}
static const {{item.media_type}} s_factors_{{item_id}}[] = { {{item.c_str_factors}} };
{% endfor %}

{% for item_id, item in leaf_items.items() if item.c_str_values is not none %}
static const char *s_values_str_{{item_id}}[] = { {{ item.c_str_values }} };
{% endfor %}

/**
  * @note Пока тип callback не поддерживается
  **/
static const menu_item_config_t s_nodes_data[] = {
{% for item_id, item in leaf_items.items() if item.type != 'callback' %}
    [MENU_ID_{{item_id.upper()}}] = {        
        .id = MENU_ID_{{item_id.upper()}},
{% if item.control == 'click' %}{# control block #}
        .click_cb = click_{{item.type}}_func,
        .position_cb = 0,
{% elif item.control == 'position' %}
        .click_cb = 0,
        .position_cb = position_{{item.type}}_func,
{% endif %}{# end control block #}
        .data.{{item.type}}_config = {
{% if item.type_info.category == 'boolean' %}{# begin category #}
            .default_value = {{ 'false' if item.default else 'true' }},
            .str_true = "{{ item.str_true }}",
            .str_false = "{{ item.str_false }}"
{% elif item.type_info.category == 'number' %}{# media_type number simple block #}
            .step = {{item.step}},
            .min = {{ item.min }},
            .max = {{ item.max }},
            .default_value = {{ item.default }}
{% endif %}{# media_type #}
{% elif item.type_info.category == 'factor' %}
            .min = {{ item.min }},
            .max = {{ item.max }},
            .default_value = {{ item.default }},
            .default_idx = {{ item.default_factor_idx }},
            .factors = s_factors_{{item_id}}
{% elif item.type_info.category == 'fixed' %}
            .count = {{ item.count }},
            .default_idx = {{ item.default_value_idx }},
            .values = s_values_str_{{ item_id }}
{% elif itme.category == 'category' %}
            .data.stub_config = {0}
{% endif %}{# category #}
        }
    },
{% endfor %}
};

const menu_item_config_t *menu_get_config(menu_id_t id) {
    if (id >= MENU_ID_COUNT)
        return 0;
    return &(s_nodes_data[id]);
}

const menu_id_t get_first_id(void) {
    return MENU_ID_{{first_item_id.upper()}};
}