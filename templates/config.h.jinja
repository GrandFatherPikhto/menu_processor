#ifndef MENU_CONFIG_H
#define MENU_CONFIG_H

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#include "menu_type.h"

// Макросы для безопасного вызова колбэков
#define MENU_SAFE_CALL_CLICK(ctx, id) \
    ((ctx) && (id) < MENU_ID_COUNT && (ctx)->configs[(id)].click_cb ? \
     (ctx)->configs[(id)].click_cb((ctx), (id)) : (void)0)

#define MENU_SAFE_CALL_POSITION(ctx, id, delta) \
    ((ctx) && (id) < MENU_ID_COUNT && (ctx)->configs[(id)].position_cb ? \
     (ctx)->configs[(id)].position_cb((ctx), (id), (delta)) : (void)0)

#define MENU_SAFE_CALL_EVENT(ctx, id, event) \
    ((ctx) && (id) < MENU_ID_COUNT && (ctx)->configs[(id)].event_cb ? \
     (ctx)->configs[(id)].event_cb((ctx), (id), (event)) : false)

// Базовые структуры (только forward declarations)
typedef struct menu_context menu_context_t;
typedef struct menu_node menu_node_t;
typedef struct menu_node_config menu_node_config_t;
typedef struct menu_callback menu_callback_t;

typedef struct s_stub_config_t {} stub_config_t;

{% for category_name, category in categories.items() if category.type != "callback" %}
// {{category_name}}
typedef struct s_{{category_name}}_t {
{% if category.role == "simple" %}
    {{category.c_type}} default_value;
    {{category.c_type}} step;
    {{category.c_type}} min;
    {{category.c_type}} max;
{% elif category.role == "factor" %}
    {{category.c_type}} max;
    {{category.c_type}} min;
    {{category.c_type}} step;
    {{category.c_type}} default_value;
    uint8_t count;
    uint8_t default_idx;
    const {{category.c_type}} *factors;
{% elif category.role == "fixed" %}
    uint8_t count;
    uint8_t default_idx;
    const {{category.c_type}} *values; {# Исправлено: должно быть указателем #}
{% endif %}

} {{category_name}}_config_t;

{% endfor %}

// Объявления callback-функций
typedef void (*menu_click_cb_t)(menu_context_t *ctx, menu_id_t id);
typedef void (*menu_position_cb_t)(menu_context_t *ctx, menu_id_t id, int8_t delta);
typedef void (*menu_double_click_cb_t)(menu_context_t *ctx, menu_id_t id);
typedef void (*menu_long_click_cb_t)(menu_context_t *ctx, menu_id_t id);
typedef void (*menu_draw_value_cb_t)(menu_context_t *ctx, menu_id_t id);
typedef void (*menu_handle_event_cb_t)(menu_context_t *ctx, menu_id_t id, menu_event_t event);

typedef struct menu_node_config {
    menu_id_t id;
    menu_category_t category;
    menu_click_cb_t click_cb;
    menu_position_cb_t position_cb;
    menu_double_click_cb_t double_click_cb;
    menu_long_click_cb_t long_click_cb;
    menu_draw_value_cb_t draw_value_cb;
    menu_handle_event_cb_t event_cb;
    union {        
        stub_config_t stub_config;
{% for category_name, category in categories.items() if category.type != "callback" %}
        {{category_name}}_config_t {{category_name}};
{% endfor %}
    } data;
} menu_node_config_t;

// Прототипы функций
const menu_node_config_t *menu_config_get_by_id(menu_context_t *ctx, menu_id_t id);
bool menu_config_handle_position_cb(menu_context_t *ctx, menu_id_t id, int8_t delta);
bool menu_config_handle_click_cb(menu_context_t *ctx, menu_id_t id);
bool menu_config_handle_double_click_cb(menu_context_t *ctx, menu_id_t id);
bool menu_config_handle_long_click_cb(menu_context_t *ctx, menu_id_t id);
bool menu_config_handle_draw_value_cb(menu_context_t *ctx, menu_id_t id);
bool menu_config_handle_event_cb(menu_context_t *ctx, menu_id_t id, menu_event_t event);

{%  for category_name, category in categories.items() %}{# categories #}
// {{category_name}}
{% if category.role == "simple" %}
{{category.c_type}} menu_config_get_{{category_name}}_min(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_max(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_step(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_default_value(menu_context_t *ctx, menu_id_t id);
{% elif category.role == "factor" %}
{{category.c_type}} menu_config_get_{{category_name}}_value(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_min(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_max(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_default_value(menu_context_t *ctx, menu_id_t id);
uint8_t menu_config_get_{{category_name}}_count(menu_context_t *ctx, menu_id_t id);
uint8_t menu_config_get_{{category_name}}_default_idx(menu_context_t *ctx, menu_id_t id);
{{category.c_type}} menu_config_get_{{category_name}}_current(menu_context_t *ctx, menu_id_t id, uint8_t factor_idx);
{% elif category.role == "fixed" %}
{{category.c_type}} menu_config_get_{{category_name}}_current(menu_context_t *ctx, menu_id_t id, uint8_t idx);
uint8_t menu_config_get_{{category_name}}_count(menu_context_t *ctx, menu_id_t id);
uint8_t menu_config_get_{{category_name}}_default_idx(menu_context_t *ctx, menu_id_t id);
{% endif %}{# role #}
{% endfor %}{# category #}


#endif /* MENU_CONFIG_H */