#include "menu_draw.h"
#include "menu_context.h"
#include "menu_tree.h"
#include "menu_config.h"
#include "menu_value.h"

#include <string.h>
#include <stdio.h>

bool menu_draw_update(menu_context_t *ctx, menu_id_t id) {
    
    if (id >= MENU_ID_COUNT || ctx->dirty == false)
        return false;

    const menu_node_t *node = menu_context_get_tree_nodes(ctx);
    const menu_node_config_t *config = menu_context_get_config_nodes(ctx);

    char *title_str = menu_context_get_title_str(ctx);
    char *value_str = menu_context_get_value_str(ctx);
    
    memset((void *)title_str, 0, LCD_STRING_LEN);
    memset((void *)value_str, 0, LCD_STRING_LEN);

    strncpy((char *)title_str, node->title, LCD_STRING_LEN);

    if (node->child == MENU_ID_COUNT) {
        if (config->draw_value_cb) {
            config->draw_value_cb(ctx, id);
        }
    } else {
        value_str[0] = '>';
    }

    menu_context_reset_dirty(ctx);
    menu_context_set_update(ctx);
}

{% for function_name, function_info in functions.items() if function_info.event_type == "draw_value" %}
void {{function_name}}(menu_context_t *ctx, menu_id_t id) {
    const char *value_str = menu_context_get_value_str(ctx);
{% if function_info.role == "simple" %}
    {{function_info.c_type}} value = menu_value_get_{{function_info.category}}_value(ctx, id);
    {{function_info.c_type}} max = menu_config_get_{{function_info.category}}_max(ctx, id);
{% if function_info.type in ["byte", "word", "dword"] %}
    int len = snprintf(NULL, 0, "%d/%d", value, max);
    snprintf((char *)value_str, LCD_STRING_LEN, "%d/%d%*c",
        value,
        max,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% elif function_info.type in ["ubyte", "uword", "udword"]%}
    int len = snprintf(NULL, 0, "%u/%u", value, max);
    snprintf((char *)value_str, LCD_STRING_LEN, "%u/%u%*c",
        value,
        max,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% elif function_info.type == "float" %}
    int len = snprintf(NULL, 0, "%3.3f/%3.3f", value, max);
    snprintf((char *)value_str, LCD_STRING_LEN, "%3.3/%3.3%*c",
        value,
        max,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% endif %}{# role simple #}
{% elif function_info.role == "factor" %}
    {{function_info.c_type}} value = menu_value_get_{{function_info.category}}_value(ctx, id);
    uint8_t *idx = menu_value_get_{{function_info.category}}_factor_idx(ctx, id);
    {{function_info.c_type}} factor = menu_config_get_{{function_info.category}}_current(ctx, id, *idx);

{% if function_info.type in ["byte", "word", "dword"] %}
    int len = snprintf(NULL, 0, "%d (x%d)", value, factor);
    snprintf((char *)value_str, LCD_STRING_LEN, "%d (x%d)%*c",
        value,
        factor,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% elif function_info.type in ["ubyte", "uword", "udword"]%}
    int len = snprintf(NULL, 0, "%u (x%u)", value, factor);
    snprintf((char *)value_str, LCD_STRING_LEN, "%u (x%u)%*c",
        value,
        factor,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% elif function_info.type == "float" %}
    int len = snprintf(NULL, 0, "%2.2f (x%2.2)", value, factor);
    snprintf((char *)value_str, LCD_STRING_LEN, "%2.2f (x%2.2f)%*c",
        value,
        factor,
        15 - len > 0 ? 15 - len : 0,
        menu_context_get_state(ctx) == MENU_STATE_EDIT ? '*' : '>'
    );
{% endif %}{# role simple #}
{% elif function_info.role == "fixed" %}
    uint8_t *idx  = menu_value_get_{{function_info.category}}_value_idx(ctx, id);
    {{function_info.c_type}} value = menu_config_get_{{function_info.category}}_current(ctx, id, *idx);
{% endif %}
}
{% endfor %}


