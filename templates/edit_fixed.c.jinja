{% if function_info.event_type == "click" %}
/** @brief Функция для фиксированных наборов значений
  * Последующее или предыдущее значение берётся из массива values
  * Если control == click, то navigation _только_ cycle.
  * @param id Идентификтор меню Определён, в enum в menu_struct.h
  * @param delta Количество "щелчков" энкодера. Передаётся только если control==position
  */
void {{function_name}}(menu_context_t *ctx, menu_id_t id) {
    uint8_t *idx  = menu_value_get_{{function_info.category}}_value_idx(ctx, id);
    uint8_t old_idx = *idx;
    uint8_t count = menu_config_get_{{function_info.category}}_count(ctx, id);
    if (count == 0) {
       return; // Или установите idx в 0
    }

    if (count - 1 > *idx)
        *idx = *idx + 1;
    else
        *idx = 0;

    if (*idx != old_idx) {
        menu_context_set_dirty(idx);
    }
}
{% elif function_info.event_type == "position" %}
void {{function_name}}(menu_context_t *ctx, menu_id_t id, int8_t delta) {
    uint8_t *idx  = menu_value_get_{{function_info.category}}_value_idx(ctx, id);
    uint8_t old_idx = *idx;
    uint8_t count = menu_config_get_{{function_info.category}}_count(ctx, id);
    if (count == 0) {
       return; // Или установите idx в 0
    }
{% if function_info.navigate == "limit" %}
    if (delta > 0) {
        if (count - delta > *idx) {
            *idx = *idx + delta;
        } else {
            *idx = count - 1;
        }
    }

    if (delta < 0) {
        if (count + delta > 0) {
            *idx = *idx + delta;
        } else {
            *idx = 0;
        }
    }
{% elif function_info.navigate == "cyclic" %}
    if (delta > 0) {
        if (count - delta > *idx) {
            *idx = *idx + delta;
        } else {
            *idx = 0;
        }
    }

    if (delta < 0) {
        if (count + delta > 0) {
            *idx = *idx + delta;
        } else {
            *idx = count - 1;
        }
    }
{% endif %}{# navigate #}
    if (*idx != old_idx) {
        menu_context_set_dirty(idx);
    }
}
{% endif %}{# event_type #}