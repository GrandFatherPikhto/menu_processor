/** @brief Функция для простейших численных типов.
  * Если control == click, то navigation _только_ cycle.
{% if function_info.navigate == "cyclic" %}
  * Значения зациклены. Достигнув max переходят в min, достигнув min переходят в max
{% elif function_info.navigate == "limit" %}
  * Значения не зациклены. Достигнув max значение остаётся max, 
  * достигнув min значение останется min, пока не поменяем направление вращения энкодера
{% endif %}
  * @param id Идентификтор меню Определён, в enum в menu_struct.h
  * @param delta Количество "щелчков" энкодера. Передаётся только если control==position
  */
{% if function_info.event_type == "click" %}
void {{function_name}}(menu_context_t *ctx, menu_id_t id) {
    {{function_info.c_type}} *val  = menu_value_get_{{function_info.category}}_value(ctx, id);
    {{function_info.c_type}}  step = menu_config_get_{{function_info.category}}_step(ctx, id);
    {{function_info.c_type}}   min = menu_config_get_{{function_info.category}}_min(ctx, id);
    {{function_info.c_type}}   max = menu_config_get_{{function_info.category}}_max(ctx, id);
    {{function_info.c_type}} old_value = *val;
    if ((*val + step) > max)
      *val = min;
    else
      *val = *val + step;
    if (*val != old_value) {
      menu_context_set_dirty(ctx);
    }
}
{% elif function_info.event_type == "position" %}
void {{function_name}}(menu_context_t *ctx, menu_id_t id, int8_t delta) {
    {{function_info.c_type}} *val  = menu_value_get_{{function_info.category}}_value(ctx, id);
    {{function_info.c_type}}  step = menu_config_get_{{function_info.category}}_step(ctx, id);
    {{function_info.c_type}}   min = menu_config_get_{{function_info.category}}_min(ctx, id);
    {{function_info.c_type}}   max = menu_config_get_{{function_info.category}}_max(ctx, id);
    {{function_info.c_type}} old_value = *val;  
{% if function_info.navigate == "limit" %}{# navigate limit #}
    if (delta > 0) {
      if ((*val + step * delta) > max) {
        *val = max;
      } else {
        *val = *val + step * delta;
      }
    }

    if (delta < 0) {
      if ((*val + step * delta) < min) {
        *val = min;
      } else {
        *val = *val + step * delta;
      }
    }
{% elif function_info.navigate == "cyclic" %}{# navigate cyclic #}
    if (delta > 0) {
      if ((*val + step * delta) > max) {
        *val = min;
      } else {
        *val = *val + step * delta;
      }
    }

    if (delta < 0) {
      if ((*val + step * delta) < min) {
        *val = max;
      } else {
        *val = *val + step * delta;
      }
    }
{% endif %}{# navigate #}
    if (*val != old_value) {
      menu_context_set_dirty(ctx);
    }
}
{% endif %}{# event_type #}
