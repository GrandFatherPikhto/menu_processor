#include "rotenc_menu.h"
#include <string.h>

// Макрос для ограничения значений
#define CLAMP(value, min, max) ((value) < (min) ? (min) : ((value) > (max) ? (max) : (value)))

// Статические данные меню
static menu_data_t s_data = {
    .items = {
        {% for item_id, item in menu_items.items() %}
        [MENU_ID_{{ item_id.upper() }}] = {
            .id = MENU_ID_{{ item_id.upper() }},
            .title = "{{ item.title }}",
            .type = MENU_TYPE_{{ item.type.upper() }},
            .parent = {% if item.parent %}MENU_ID_{{ item.parent.upper() }}{% else %}MENU_ID_COUNT{% endif %},
            .first_child = {% if item.first_child %}MENU_ID_{{ item.first_child.upper() }}{% else %}MENU_ID_COUNT{% endif %},
            .next_sibling = {% if item.next_sibling %}MENU_ID_{{ item.next_sibling.upper() }}{% else %}MENU_ID_COUNT{% endif %},
            .prev_sibling = {% if item.prev_sibling %}MENU_ID_{{ item.prev_sibling.upper() }}{% else %}MENU_ID_COUNT{% endif %},
            .data = {
                {% if item.type == 'action_int' %}
                .action_int = {
                    .value = {{ item.default }},
                    .min = {{ item.min }},
                    .max = {{ item.max }},
                    .default_value = {{ item.default }},
                    .step = {{ item.step | default(1) }}
                }
                {% elif item.type == 'action_int_factor' %}
                .action_int_factor = {
                    .value = {{ item.default }},
                    .min = {{ item.min }},
                    .max = {{ item.max }},
                    .default_value = {{ item.default }},
                    .factors = (const int32_t[]){{ item.factors }},
                    .factors_count = {{ item.factors | length }},
                    .default_factor_idx = {{ item.default_factor_idx }},
                    .factor_idx = {{ item.default_factor_idx }}
                }
                {% elif item.type == 'action_bool' %}
                .action_bool = {
                    .value = {{ 'true' if item.default else 'false' }},
                    .default_value = {{ 'true' if item.default else 'false' }}
                }
                {% elif item.type == 'action_callback' %}
                .action_callback = {
                    .callback = NULL
                }
                {% endif %}
            },
            .user_data_ptr = NULL
        },
        {% endfor %}
    },
    .current_menu = MENU_ID_{{ first_menu_id }},
    .state = MENU_STATE_NAVIGATION
};

// Реализация функций
menu_data_t *menu_get_data(void) {
    return &s_data;
}

void *menu_get_data_ptr(menu_id_t id) {
    if (id >= MENU_ID_COUNT) return NULL;
    
    menu_item_t *item = &s_data.items[id];
    switch (item->type) {
        case MENU_TYPE_ACTION_INT:
            return &item->data.action_int.value;
        case MENU_TYPE_ACTION_INT_FACTOR:
            return &item->data.action_int_factor.value;
        case MENU_TYPE_ACTION_BOOL:
            return &item->data.action_bool.value;
        default:
            return NULL;
    }
}

void handle_change_position(int8_t delta) {
    menu_item_t *current = &s_data.items[s_data.current_menu];
    
    if (s_data.state == MENU_STATE_NAVIGATION) {
        // Навигация между элементами
        menu_id_t target = delta > 0 ? current->next_sibling : current->prev_sibling;
        if (target != MENU_ID_COUNT) {
            s_data.current_menu = target;
        }
    } else if (s_data.state == MENU_STATE_EDIT) {
        // Редактирование значения
        switch (current->type) {
            case MENU_TYPE_ACTION_INT:
                current->data.action_int.value += delta * current->data.action_int.step;
                current->data.action_int.value = CLAMP(current->data.action_int.value,
                    current->data.action_int.min, current->data.action_int.max);
                break;
                
            case MENU_TYPE_ACTION_INT_FACTOR:
                current->data.action_int_factor.value += delta *
                    current->data.action_int_factor.factors[current->data.action_int_factor.factor_idx];
                current->data.action_int_factor.value = CLAMP(current->data.action_int_factor.value,
                    current->data.action_int_factor.min, current->data.action_int_factor.max);
                break;
                
            // ... другие типы
        }
    }
}

void handle_push_button(void) {
    menu_item_t *current = &s_data.items[s_data.current_menu];
    
    if (s_data.state == MENU_STATE_NAVIGATION) {
        if (current->first_child != MENU_ID_COUNT) {
            // Переход к ребенку
            s_data.current_menu = current->first_child;
        } else if (current->type == MENU_TYPE_ACTION_BOOL ||
                   current->type == MENU_TYPE_ACTION_INT_FACTOR) {
            // Переход в режим редактирования
            s_data.state = MENU_STATE_EDIT;
        }
    } else if (s_data.state == MENU_STATE_EDIT) {
        // Обработка в режиме редактирования
        switch (current->type) {
            case MENU_TYPE_ACTION_BOOL:
                current->data.action_bool.value = !current->data.action_bool.value;
                break;
                
            case MENU_TYPE_ACTION_INT_FACTOR:
                current->data.action_int_factor.factor_idx =
                    (current->data.action_int_factor.factor_idx + 1) %
                    current->data.action_int_factor.factors_count;
                break;
        }
    }
}

void handle_long_push_button(void) {
    if (s_data.state == MENU_STATE_EDIT) {
        // Выход из режима редактирования
        s_data.state = MENU_STATE_NAVIGATION;
    } else {
        // Возврат к родителю
        menu_item_t *current = &s_data.items[s_data.current_menu];
        if (current->parent != MENU_ID_COUNT) {
            s_data.current_menu = current->parent;
        }
    }
}

void handle_double_click_button(void) {
    if (s_data.state == MENU_STATE_EDIT) {
        // Сброс к значениям по умолчанию
        menu_item_t *current = &s_data.items[s_data.current_menu];
        switch (current->type) {
            case MENU_TYPE_ACTION_INT:
                current->data.action_int.value = current->data.action_int.default_value;
                break;
            case MENU_TYPE_ACTION_INT_FACTOR:
                current->data.action_int_factor.value = current->data.action_int_factor.default_value;
                current->data.action_int_factor.factor_idx = current->data.action_int_factor.default_factor_idx;
                break;
            case MENU_TYPE_ACTION_BOOL:
                current->data.action_bool.value = current->data.action_bool.default_value;
                break;
        }
    } else {
        // Возврат к первому элементу
        s_data.current_menu = MENU_ID_{{ first_menu_id }};
    }
}